trigger: none
 
parameters:

  - name: vmAction

    displayName: 'Action (start or stop)'

    type: string

    default: 'start'

    values:

      - start

      - stop
 
  - name: vmNames

    displayName: 'List of VM Names (comma-separated)'

    type: string

    default: 'vm1,vm2'
 
  - name: resourceGroup

    displayName: 'Resource Group Name'

    type: string

    default: 'RG Name'
 
variables:

  azureSubscription: 'data-analytics-platform-edw-dev'
 
jobs:

- job: ManageVMs

  displayName: 'Start or Stop Azure VMs'

  pool:

    vmImage: 'ubuntu-latest'
 
  steps:

  - task: AzureCLI@2

    displayName: 'Execute VM Actions for Multiple VMs'

    inputs:

      azureSubscription: $(azureSubscription)

      scriptType: 'bash'

      scriptLocation: 'inlineScript'

      inlineScript: |

        echo "Action: ${{ parameters.vmAction }}"

        echo "VMs: ${{ parameters.vmNames }}"

        echo "Resource Group: ${{ parameters.resourceGroup }}"

        # Split comma-separated VM names into an array

        IFS=',' read -ra VM_LIST <<< "${{ parameters.vmNames }}"
 
        for vm in "${VM_LIST[@]}"; do

          vm=$(echo $vm | xargs)  # Trim spaces

          echo ""

          echo "Processing VM: $vm"
 
          az vm show --name "$vm" --resource-group "${{ parameters.resourceGroup }}" --query "name" -o tsv >/dev/null 2>&1

          if [ $? -ne 0 ]; then

            echo "VM '$vm' not found. Skipping."

            continue

          fi
 
          if [ "${{ parameters.vmAction }}" == "start" ]; then

            echo " Starting VM: $vm"

            az vm start --resource-group "${{ parameters.resourceGroup }}" --name "$vm"

          elif [ "${{ parameters.vmAction }}" == "stop" ]; then

            echo "Stopping VM: $vm"

            az vm deallocate --resource-group "${{ parameters.resourceGroup }}" --name "$vm"

          else

            echo "Invalid action specified!"

            exit 1

          fi
 