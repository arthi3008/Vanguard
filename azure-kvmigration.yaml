trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

parameters:
  - name: env
    displayName: Environment
    default: dev
    type: string
    values:
      - dev
      - qa
      - prod
      - prod_dr

  - name: domain
    displayName: Azure Data Factory
    type: string
    default: nonedw
    values:
      - all
      - accounting
      - associates
      - customer
      - finance
      - nonedw
      - sales

  - name: sourceKeyVaultName
    displayName: Source Key Vault Name
    type: string
    default: 'source-keyvault-name'

  - name: targetKeyVaultName
    displayName: Target Key Vault Name
    type: string
    default: 'target-keyvault-name'

variables:
  - name: pool
    value: 'ubuntu-latest'

  - name: azureSubscription
    ${{ if eq(parameters.env, 'qa') }}:
      value: 'vanguard-nonprod-azuredevops.com'
    ${{ else }}:
      value: 'vanguard-nonprod-azuredevops.com'

pool:
  vmImage: $(pool)

stages:
  - stage: Build
    displayName: 'Build'
    jobs:
      - job: publishJob
        displayName: 'Publish job'
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifactName: keyvault_migration

      - job: runCode
        displayName: 'Run PowerShell Script for KeyVault Migration'
        dependsOn: publishJob
        steps:
          - task: AzureCLI@2
            displayName: 'Run PowerShell Script'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pwsh
              scriptLocation: inlineScript
              inlineScript: |
                $sourceKeyVaultName = "${{ parameters.sourceKeyVaultName }}"
                $targetKeyVaultName = "${{ parameters.targetKeyVaultName }}"

                $AzureContextID = (Connect-AzAccount -Identity).context
                Set-AzContext -Subscription "ec9f8bb9-8972-4fb4-8a59-b403b114974d" -DefaultProfile $AzureContextID

                function ConvertTo-PlainString($secureString) {
                    $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString)
                    return [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)
                }

                function ConvertTo-SecureStringFromPlain($plainString) {
                    $secureString = New-Object -TypeName System.Security.SecureString
                    $plainString.ToCharArray() | ForEach-Object { $secureString.AppendChar($_) }
                    return $secureString
                }

                foreach ($secret in (Get-AzKeyVaultSecret -VaultName $sourceKeyVaultName)) {
                    try {
                        $sourceSecretValue = (Get-AzKeyVaultSecret -VaultName $sourceKeyVaultName -Name $secret.Name).SecretValue
                        $targetSecret = Get-AzKeyVaultSecret -VaultName $targetKeyVaultName -Name $secret.Name -ErrorAction SilentlyContinue

                        $sourceSecretPlainText = ConvertTo-PlainString($sourceSecretValue)
                        $targetSecretPlainText = if ($targetSecret) { ConvertTo-PlainString($targetSecret.SecretValue) } else { $null }

                        if (-not $targetSecret -or $sourceSecretPlainText -ne $targetSecretPlainText) {
                            Set-AzKeyVaultSecret -VaultName $targetKeyVaultName -Name $secret.Name -SecretValue (ConvertTo-SecureStringFromPlain $sourceSecretPlainText)
                            Write-Host "Secret '$($secret.Name)' has been $(if ($targetSecret) {'updated'} else {'copied'}) in target Key Vault."
                        } else {
                            Write-Host "Secret '$($secret.Name)' is already up to date."
                        }
                    }
                    catch {
                        Write-Host "Error processing secret '$($secret.Name)': $_"
                    }
                }

                Write-Host "Completed processing secrets from $sourceKeyVaultName to $targetKeyVaultName."
